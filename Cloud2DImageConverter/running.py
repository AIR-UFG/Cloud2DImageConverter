# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_running.ipynb.

# %% auto 0
__all__ = ['FOV_UP', 'FOV_DOWN', 'WIDTH', 'HEIGHT', 'IS_LABEL', 'FOLDER_PATH', 'VELODYNE_PATH', 'LABEL_PATH', 'RESULTS_FOLDER',
           'BATCH_SIZE', 'MAX_LEN', 'hp_define', 'hp_show', 'main']

# %% ../nbs/03_running.ipynb 1
from . import spherical_projection as sp
from . import image_generator as ig
from . import data
from tqdm import tqdm
import shutil
import os

# %% ../nbs/03_running.ipynb 3
FOV_UP = 3.0
FOV_DOWN = -25.0
WIDTH = 1024
HEIGHT = 64

# %% ../nbs/03_running.ipynb 5
IS_LABEL = True
FOLDER_PATH = "../point_clouds/semantic_kitti/"
VELODYNE_PATH = FOLDER_PATH + "velodyne"
LABEL_PATH = FOLDER_PATH + "labels" if IS_LABEL else None
RESULTS_FOLDER = "../results/"

# %% ../nbs/03_running.ipynb 7
if os.path.exists(RESULTS_FOLDER): shutil.rmtree(RESULTS_FOLDER)
os.makedirs(RESULTS_FOLDER)
os.makedirs(RESULTS_FOLDER+"reflectance")
os.makedirs(RESULTS_FOLDER+"depth")
os.makedirs(RESULTS_FOLDER+"segmentation_mask")

# %% ../nbs/03_running.ipynb 9
BATCH_SIZE = 500
MAX_LEN = len(os.listdir(VELODYNE_PATH))
if BATCH_SIZE > MAX_LEN: 
    BATCH_SIZE = MAX_LEN-1

# %% ../nbs/03_running.ipynb 11
def hp_define():
    FOV_UP = 3.0
    FOV_DOWN = -25.0
    WIDTH = 1024
    HEIGHT = 64

def hp_show():
    print(f"FOV_UP: {FOV_UP}\nFOV_DOWN: {FOV_DOWN}\nWIDTH: {WIDTH}\nHEIGHT: {HEIGHT}\n")
    print(f"IS_LABEL: {IS_LABEL}\n")
    print(f"Data Path: {FOLDER_PATH}\nResults Path: {RESULTS_FOLDER}\n")
    print(f"Batch Size: {BATCH_SIZE}\nQuantidade de frames: {MAX_LEN}\n")
    
def main():
    for batch in tqdm(range(BATCH_SIZE, MAX_LEN, BATCH_SIZE), desc="Batch:"):
        start, end = ig.define_range(batch, BATCH_SIZE, MAX_LEN)
        velodyne_list = sorted(os.listdir(VELODYNE_PATH))[start:end]
        if IS_LABEL: label_list = sorted(os.listdir(LABEL_PATH))[start:end]
        point_cloud = data.load_data(VELODYNE_PATH, velodyne_list, LABEL_PATH, label_list)
        projection_dict = ig.do_projection(point_cloud, FOV_UP, FOV_DOWN, WIDTH, HEIGHT, IS_LABEL)
        ig.create_images(projection_dict, RESULTS_FOLDER)
