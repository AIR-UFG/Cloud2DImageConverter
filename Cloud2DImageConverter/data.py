# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_data.ipynb.

# %% auto 0
__all__ = ['folder_path', 'label_map', 'learning_map', 'color_map', 'load_data']

# %% ../nbs/00_data.ipynb 3
import numpy as np
import yaml
import os

# %% ../nbs/00_data.ipynb 5
folder_path = "../point_clouds/semantic_kitti/"

with open(folder_path+"semantic-kitti.yaml", 'r') as file:
    data = yaml.safe_load(file)

label_map = data.get('labels', {})
learning_map = data.get('learning_map', {})
color_map = data.get('color_map', {})

# %% ../nbs/00_data.ipynb 7
def load_data(sequence_path):
    velodyne_path = os.path.join(sequence_path, 'velodyne')
    labels_path = os.path.join(sequence_path, 'labels')

    frames = []
    for frame_name in sorted(os.listdir(velodyne_path)):
        frame_path = os.path.join(velodyne_path, frame_name)
        with open(frame_path, 'rb') as f:
            frames.append(np.fromfile(f, dtype=np.float32).reshape(-1, 4))

    labels = []
    for label_name in sorted(os.listdir(labels_path)):
        label_path = os.path.join(labels_path, label_name)
        with open(label_path, 'rb') as f:
            np_label = np.fromfile(f, dtype=np.uint32)
            np_label = np_label & 0xFFFF
            labels.append(np_label)

    point_cloud = []
    for frame, label in zip(frames,labels):
        point_cloud.append(np.concatenate((frame, label.reshape(-1, 1)), axis=1))
    
    return point_cloud
