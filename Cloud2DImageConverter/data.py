# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_data.ipynb.

# %% auto 0
__all__ = ['actual_path', 'root_path', 'yaml_path', 'label_map', 'learning_map', 'learning_map_inv', 'color_map', 'get_root_path',
           'load_data']

# %% ../nbs/00_data.ipynb 2
import numpy as np
import yaml
import re
import os

# %% ../nbs/00_data.ipynb 4
def get_root_path(path):
    path_index = path.find("Cloud2DImageConverter")
    return path[:path_index + len("Cloud2DImageConverter")]

actual_path = os.getcwd()
root_path = get_root_path(actual_path)
yaml_path = root_path+"/point_clouds/semantic_kitti/semantic-kitti.yaml"

with open(yaml_path, 'r') as file:
    data = yaml.safe_load(file)

label_map = data.get('labels', {})
learning_map = data.get('learning_map', {})
learning_map_inv = data.get('learning_map_inv', {})
color_map = data.get('color_map', {})

# %% ../nbs/00_data.ipynb 6
def load_data(velodyne_path, velodyne_list, labels_path=None, label_list=None):
    point_cloud = []
    for index in (range(len(velodyne_list))):
        frame_path = os.path.join(velodyne_path, velodyne_list[index])
        with open(frame_path, 'rb') as f:
            frame = np.fromfile(f, dtype=np.float32).reshape(-1, 4)

        if labels_path != None:
            label_path = os.path.join(labels_path, label_list[index])
            with open(label_path, 'rb') as f:
                label = np.fromfile(f, dtype=np.uint32)
                label = label & 0xFFFF
            point_cloud.append(np.concatenate((frame, label.reshape(-1, 1)), axis=1))
        else:
            point_cloud.append(frame)
            
    return point_cloud
