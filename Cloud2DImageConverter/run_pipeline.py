# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_run_pipeline.ipynb.

# %% auto 0
__all__ = ['Running']

# %% ../nbs/04_run_pipeline.ipynb 1
from . import spherical_projection as sp
from . import image_generator as ig
from . import data
from tqdm import tqdm
import shutil
import os

# %% ../nbs/04_run_pipeline.ipynb 2
class Running():
    def __init__(self, data_path, results_path, batch_size=500, fov_up=3.0, fov_down=-25.0, width=1024, height=64, is_label=True):
        self.fov_up = fov_up
        self.fov_down = fov_down
        self.width = width
        self.height = height
        self.data_path = data_path
        self.results_path = results_path
        self.batch_size = batch_size
        self.is_label = is_label

    def run(self):
        velodyne_path = self.data_path+"velodyne"
        label_path = self.data_path + "labels" if self.is_label else None
        max_len = len(os.listdir(velodyne_path))
        if self.batch_size > max_len: 
            self.batch_size = max_len-1

        if os.path.exists(self.results_path): shutil.rmtree(self.results_path)
        os.makedirs(self.results_path)
        os.makedirs(self.results_path+"reflectance")
        os.makedirs(self.results_path+"depth")
        os.makedirs(self.results_path+"segmentation_mask")

        for batch in tqdm(range(self.batch_size, max_len, self.batch_size), desc="Batch:"):
            start, end = ig.define_range(batch, self.batch_size, max_len)
            velodyne_list = sorted(os.listdir(velodyne_path))[start:end]
            label_list = sorted(os.listdir(label_path))[start:end] if self.is_label else None
            point_cloud = data.load_data(velodyne_path, velodyne_list, label_path, label_list)
            projection_dict = ig.do_projection(point_cloud, self.fov_up, self.fov_down, self.width, self.height, self.is_label)
            ig.create_images(projection_dict, self.results_path)
